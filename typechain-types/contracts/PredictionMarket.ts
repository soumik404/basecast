/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PredictionMarket {
  export type BetStruct = {
    id: BigNumberish;
    predictionId: BigNumberish;
    user: AddressLike;
    choice: BigNumberish;
    amount: BigNumberish;
    timestamp: BigNumberish;
    claimed: boolean;
    payout: BigNumberish;
  };

  export type BetStructOutput = [
    id: bigint,
    predictionId: bigint,
    user: string,
    choice: bigint,
    amount: bigint,
    timestamp: bigint,
    claimed: boolean,
    payout: bigint
  ] & {
    id: bigint;
    predictionId: bigint;
    user: string;
    choice: bigint;
    amount: bigint;
    timestamp: bigint;
    claimed: boolean;
    payout: bigint;
  };

  export type PredictionStruct = {
    id: BigNumberish;
    title: string;
    description: string;
    creator: AddressLike;
    token: AddressLike;
    deadline: BigNumberish;
    maxCapacity: BigNumberish;
    totalYes: BigNumberish;
    totalNo: BigNumberish;
    status: BigNumberish;
    proposedResult: BigNumberish;
    proposedBy: AddressLike;
    proposedAt: BigNumberish;
    finalResult: BigNumberish;
    verifiedBy: AddressLike;
    verifiedAt: BigNumberish;
    rejectionReason: string;
  };

  export type PredictionStructOutput = [
    id: bigint,
    title: string,
    description: string,
    creator: string,
    token: string,
    deadline: bigint,
    maxCapacity: bigint,
    totalYes: bigint,
    totalNo: bigint,
    status: bigint,
    proposedResult: bigint,
    proposedBy: string,
    proposedAt: bigint,
    finalResult: bigint,
    verifiedBy: string,
    verifiedAt: bigint,
    rejectionReason: string
  ] & {
    id: bigint;
    title: string;
    description: string;
    creator: string;
    token: string;
    deadline: bigint;
    maxCapacity: bigint;
    totalYes: bigint;
    totalNo: bigint;
    status: bigint;
    proposedResult: bigint;
    proposedBy: string;
    proposedAt: bigint;
    finalResult: bigint;
    verifiedBy: string;
    verifiedAt: bigint;
    rejectionReason: string;
  };
}

export interface PredictionMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PLATFORM_FEE_BPS"
      | "USDC_ADDRESS"
      | "addVerifier"
      | "bets"
      | "calculatePotentialPayout"
      | "claimReward"
      | "collectFees"
      | "createPrediction"
      | "emergencyWithdraw"
      | "feeCollector"
      | "getBet"
      | "getPrediction"
      | "getPredictionBets"
      | "getUserBets"
      | "nextBetId"
      | "nextPredictionId"
      | "owner"
      | "placeBet"
      | "predictionBets"
      | "predictions"
      | "proposeResult"
      | "removeVerifier"
      | "renounceOwnership"
      | "transferOwnership"
      | "userBets"
      | "verifiers"
      | "verifyResult"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BetPlaced"
      | "OwnershipTransferred"
      | "PredictionCreated"
      | "ResultProposed"
      | "ResultRejected"
      | "ResultVerified"
      | "RewardClaimed"
      | "VerifierAdded"
      | "VerifierRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PLATFORM_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDC_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bets", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "calculatePotentialPayout",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPrediction",
    values: [string, string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrediction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPredictionBets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "nextBetId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextPredictionId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBet",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "predictionBets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "predictions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeResult",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userBets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyResult",
    values: [BigNumberish, boolean, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "PLATFORM_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDC_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculatePotentialPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPredictionBets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextBetId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextPredictionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictionBets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userBets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyResult",
    data: BytesLike
  ): Result;
}

export namespace BetPlacedEvent {
  export type InputTuple = [
    betId: BigNumberish,
    predictionId: BigNumberish,
    user: AddressLike,
    choice: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    betId: bigint,
    predictionId: bigint,
    user: string,
    choice: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    betId: bigint;
    predictionId: bigint;
    user: string;
    choice: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PredictionCreatedEvent {
  export type InputTuple = [
    predictionId: BigNumberish,
    creator: AddressLike,
    title: string,
    token: AddressLike,
    deadline: BigNumberish,
    maxCapacity: BigNumberish
  ];
  export type OutputTuple = [
    predictionId: bigint,
    creator: string,
    title: string,
    token: string,
    deadline: bigint,
    maxCapacity: bigint
  ];
  export interface OutputObject {
    predictionId: bigint;
    creator: string;
    title: string;
    token: string;
    deadline: bigint;
    maxCapacity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResultProposedEvent {
  export type InputTuple = [
    predictionId: BigNumberish,
    proposedResult: BigNumberish,
    proposer: AddressLike
  ];
  export type OutputTuple = [
    predictionId: bigint,
    proposedResult: bigint,
    proposer: string
  ];
  export interface OutputObject {
    predictionId: bigint;
    proposedResult: bigint;
    proposer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResultRejectedEvent {
  export type InputTuple = [
    predictionId: BigNumberish,
    verifier: AddressLike,
    reason: string
  ];
  export type OutputTuple = [
    predictionId: bigint,
    verifier: string,
    reason: string
  ];
  export interface OutputObject {
    predictionId: bigint;
    verifier: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResultVerifiedEvent {
  export type InputTuple = [
    predictionId: BigNumberish,
    finalResult: BigNumberish,
    verifier: AddressLike
  ];
  export type OutputTuple = [
    predictionId: bigint,
    finalResult: bigint,
    verifier: string
  ];
  export interface OutputObject {
    predictionId: bigint;
    finalResult: bigint;
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    betId: BigNumberish,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [betId: bigint, user: string, amount: bigint];
  export interface OutputObject {
    betId: bigint;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierAddedEvent {
  export type InputTuple = [verifier: AddressLike];
  export type OutputTuple = [verifier: string];
  export interface OutputObject {
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierRemovedEvent {
  export type InputTuple = [verifier: AddressLike];
  export type OutputTuple = [verifier: string];
  export interface OutputObject {
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PredictionMarket extends BaseContract {
  connect(runner?: ContractRunner | null): PredictionMarket;
  waitForDeployment(): Promise<this>;

  interface: PredictionMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PLATFORM_FEE_BPS: TypedContractMethod<[], [bigint], "view">;

  USDC_ADDRESS: TypedContractMethod<[], [string], "view">;

  addVerifier: TypedContractMethod<
    [verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  bets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, bigint, boolean, bigint] & {
        id: bigint;
        predictionId: bigint;
        user: string;
        choice: bigint;
        amount: bigint;
        timestamp: bigint;
        claimed: boolean;
        payout: bigint;
      }
    ],
    "view"
  >;

  calculatePotentialPayout: TypedContractMethod<
    [predictionId: BigNumberish, choice: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;

  claimReward: TypedContractMethod<[betId: BigNumberish], [void], "nonpayable">;

  collectFees: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  createPrediction: TypedContractMethod<
    [
      title: string,
      description: string,
      token: AddressLike,
      deadline: BigNumberish,
      maxCapacity: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  feeCollector: TypedContractMethod<[], [string], "view">;

  getBet: TypedContractMethod<
    [betId: BigNumberish],
    [PredictionMarket.BetStructOutput],
    "view"
  >;

  getPrediction: TypedContractMethod<
    [predictionId: BigNumberish],
    [PredictionMarket.PredictionStructOutput],
    "view"
  >;

  getPredictionBets: TypedContractMethod<
    [predictionId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getUserBets: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  nextBetId: TypedContractMethod<[], [bigint], "view">;

  nextPredictionId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  placeBet: TypedContractMethod<
    [predictionId: BigNumberish, choice: BigNumberish, amount: BigNumberish],
    [bigint],
    "payable"
  >;

  predictionBets: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  predictions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string
      ] & {
        id: bigint;
        title: string;
        description: string;
        creator: string;
        token: string;
        deadline: bigint;
        maxCapacity: bigint;
        totalYes: bigint;
        totalNo: bigint;
        status: bigint;
        proposedResult: bigint;
        proposedBy: string;
        proposedAt: bigint;
        finalResult: bigint;
        verifiedBy: string;
        verifiedAt: bigint;
        rejectionReason: string;
      }
    ],
    "view"
  >;

  proposeResult: TypedContractMethod<
    [predictionId: BigNumberish, result: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeVerifier: TypedContractMethod<
    [verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userBets: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  verifiers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  verifyResult: TypedContractMethod<
    [predictionId: BigNumberish, approve: boolean, rejectionReason: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PLATFORM_FEE_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "USDC_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addVerifier"
  ): TypedContractMethod<[verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "bets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, bigint, boolean, bigint] & {
        id: bigint;
        predictionId: bigint;
        user: string;
        choice: bigint;
        amount: bigint;
        timestamp: bigint;
        claimed: boolean;
        payout: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculatePotentialPayout"
  ): TypedContractMethod<
    [predictionId: BigNumberish, choice: BigNumberish, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<[betId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collectFees"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPrediction"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      token: AddressLike,
      deadline: BigNumberish,
      maxCapacity: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feeCollector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBet"
  ): TypedContractMethod<
    [betId: BigNumberish],
    [PredictionMarket.BetStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrediction"
  ): TypedContractMethod<
    [predictionId: BigNumberish],
    [PredictionMarket.PredictionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPredictionBets"
  ): TypedContractMethod<[predictionId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserBets"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "nextBetId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextPredictionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeBet"
  ): TypedContractMethod<
    [predictionId: BigNumberish, choice: BigNumberish, amount: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "predictionBets"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "predictions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string
      ] & {
        id: bigint;
        title: string;
        description: string;
        creator: string;
        token: string;
        deadline: bigint;
        maxCapacity: bigint;
        totalYes: bigint;
        totalNo: bigint;
        status: bigint;
        proposedResult: bigint;
        proposedBy: string;
        proposedAt: bigint;
        finalResult: bigint;
        verifiedBy: string;
        verifiedAt: bigint;
        rejectionReason: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposeResult"
  ): TypedContractMethod<
    [predictionId: BigNumberish, result: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeVerifier"
  ): TypedContractMethod<[verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userBets"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifiers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyResult"
  ): TypedContractMethod<
    [predictionId: BigNumberish, approve: boolean, rejectionReason: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BetPlaced"
  ): TypedContractEvent<
    BetPlacedEvent.InputTuple,
    BetPlacedEvent.OutputTuple,
    BetPlacedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PredictionCreated"
  ): TypedContractEvent<
    PredictionCreatedEvent.InputTuple,
    PredictionCreatedEvent.OutputTuple,
    PredictionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ResultProposed"
  ): TypedContractEvent<
    ResultProposedEvent.InputTuple,
    ResultProposedEvent.OutputTuple,
    ResultProposedEvent.OutputObject
  >;
  getEvent(
    key: "ResultRejected"
  ): TypedContractEvent<
    ResultRejectedEvent.InputTuple,
    ResultRejectedEvent.OutputTuple,
    ResultRejectedEvent.OutputObject
  >;
  getEvent(
    key: "ResultVerified"
  ): TypedContractEvent<
    ResultVerifiedEvent.InputTuple,
    ResultVerifiedEvent.OutputTuple,
    ResultVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierAdded"
  ): TypedContractEvent<
    VerifierAddedEvent.InputTuple,
    VerifierAddedEvent.OutputTuple,
    VerifierAddedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierRemoved"
  ): TypedContractEvent<
    VerifierRemovedEvent.InputTuple,
    VerifierRemovedEvent.OutputTuple,
    VerifierRemovedEvent.OutputObject
  >;

  filters: {
    "BetPlaced(uint256,uint256,address,uint8,uint256)": TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;
    BetPlaced: TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PredictionCreated(uint256,address,string,address,uint256,uint256)": TypedContractEvent<
      PredictionCreatedEvent.InputTuple,
      PredictionCreatedEvent.OutputTuple,
      PredictionCreatedEvent.OutputObject
    >;
    PredictionCreated: TypedContractEvent<
      PredictionCreatedEvent.InputTuple,
      PredictionCreatedEvent.OutputTuple,
      PredictionCreatedEvent.OutputObject
    >;

    "ResultProposed(uint256,uint8,address)": TypedContractEvent<
      ResultProposedEvent.InputTuple,
      ResultProposedEvent.OutputTuple,
      ResultProposedEvent.OutputObject
    >;
    ResultProposed: TypedContractEvent<
      ResultProposedEvent.InputTuple,
      ResultProposedEvent.OutputTuple,
      ResultProposedEvent.OutputObject
    >;

    "ResultRejected(uint256,address,string)": TypedContractEvent<
      ResultRejectedEvent.InputTuple,
      ResultRejectedEvent.OutputTuple,
      ResultRejectedEvent.OutputObject
    >;
    ResultRejected: TypedContractEvent<
      ResultRejectedEvent.InputTuple,
      ResultRejectedEvent.OutputTuple,
      ResultRejectedEvent.OutputObject
    >;

    "ResultVerified(uint256,uint8,address)": TypedContractEvent<
      ResultVerifiedEvent.InputTuple,
      ResultVerifiedEvent.OutputTuple,
      ResultVerifiedEvent.OutputObject
    >;
    ResultVerified: TypedContractEvent<
      ResultVerifiedEvent.InputTuple,
      ResultVerifiedEvent.OutputTuple,
      ResultVerifiedEvent.OutputObject
    >;

    "RewardClaimed(uint256,address,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "VerifierAdded(address)": TypedContractEvent<
      VerifierAddedEvent.InputTuple,
      VerifierAddedEvent.OutputTuple,
      VerifierAddedEvent.OutputObject
    >;
    VerifierAdded: TypedContractEvent<
      VerifierAddedEvent.InputTuple,
      VerifierAddedEvent.OutputTuple,
      VerifierAddedEvent.OutputObject
    >;

    "VerifierRemoved(address)": TypedContractEvent<
      VerifierRemovedEvent.InputTuple,
      VerifierRemovedEvent.OutputTuple,
      VerifierRemovedEvent.OutputObject
    >;
    VerifierRemoved: TypedContractEvent<
      VerifierRemovedEvent.InputTuple,
      VerifierRemovedEvent.OutputTuple,
      VerifierRemovedEvent.OutputObject
    >;
  };
}
