/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { MockUSDC, MockUSDCInterface } from "../../contracts/MockUSDC";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "faucet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608034620003c8576040906001600160401b039080830182811182821017620003b257835260088152602090672aa9a21021b7b4b760c11b8282015283519284840184811082821117620003b2578552600493848152635553444360e01b8482015282518281116200039d576003918254916001958684811c9416801562000392575b888510146200037d578190601f9485811162000327575b508890858311600114620002c057600092620002b4575b505060001982861b1c191690861b1783555b80519384116200029f5786548581811c9116801562000294575b878210146200027f5782811162000234575b5085918411600114620001c957938394918492600095620001bd575b50501b92600019911b1c19161782555b600660ff1960055416176005553315620001a65760025464e8d4a51000928382018092116200019157506000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9160025533835282815284832084815401905584519384523393a3516107569081620003ce8239f35b601190634e487b7160e01b6000525260246000fd5b506000602492519163ec442f0560e01b8352820152fd5b0151935038806200010a565b9190601f198416928760005284876000209460005b89898383106200021c575050501062000201575b50505050811b0182556200011a565b01519060f884600019921b161c1916905538808080620001f2565b868601518955909701969485019488935001620001de565b87600052866000208380870160051c82019289881062000275575b0160051c019086905b82811062000268575050620000ee565b6000815501869062000258565b925081926200024f565b602288634e487b7160e01b6000525260246000fd5b90607f1690620000dc565b604187634e487b7160e01b6000525260246000fd5b015190503880620000b0565b90889350601f19831691876000528a6000209260005b8c828210620003105750508411620002f7575b505050811b018355620000c2565b015160001983881b60f8161c19169055388080620002e9565b8385015186558c97909501949384019301620002d6565b90915085600052886000208580850160051c8201928b861062000373575b918a91869594930160051c01915b8281106200036357505062000099565b600081558594508a910162000353565b9250819262000345565b602289634e487b7160e01b6000525260246000fd5b93607f169362000082565b604186634e487b7160e01b6000525260246000fd5b634e487b7160e01b600052604160045260246000fd5b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461045a57508163095ea7b3146103ac57816318160ddd1461038d57816323b872dd14610296578163313ce5671461027457816340c10f191461023857816370a082311461023d5781637b56c2b21461023857816395d89b411461011957508063a9059cbb146100e95763dd62ed3e1461009e57600080fd5b346100e557806003193601126100e557806020926100ba61057b565b6100c2610596565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50346100e557806003193601126100e55760209061011261010861057b565b602435903361065b565b5160018152f35b8383346100e557816003193601126100e557805190828454600181811c9080831692831561022e575b602093848410811461021b578388529081156101ff57506001146101aa575b505050829003601f01601f191682019267ffffffffffffffff8411838510176101975750829182610193925282610532565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106101eb5750505050830101858080610161565b8054888601830152930192849082016101d5565b60ff1916878501525050151560051b8401019050858080610161565b634e487b7160e01b895260228a52602489fd5b91607f1691610142565b6105ac565b5050346100e55760203660031901126100e55760209181906001600160a01b0361026561057b565b16815280845220549051908152f35b5050346100e557816003193601126100e55760209060ff600554169051908152f35b9050823461038a57606036600319011261038a576102b261057b565b6102ba610596565b916044359360018060a01b0383168083526001602052868320338452602052868320549160001983106102f6575b60208861011289898961065b565b86831061035e57811561034757331561033057508252600160209081528683203384528152918690209085900390558290610112876102e8565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b8751637dc7a0d960e11b8152339181019182526020820193909352604081018790528291506060010390fd5b80fd5b5050346100e557816003193601126100e5576020906002549051908152f35b9050346104565781600319360112610456576103c661057b565b60243590331561043f576001600160a01b031691821561042857508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b8280fd5b8490843461045657826003193601126104565782600354600181811c90808316928315610528575b602093848410811461021b578388529081156101ff57506001146104d257505050829003601f01601f191682019267ffffffffffffffff8411838510176101975750829182610193925282610532565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8385106105145750505050830101858080610161565b8054888601830152930192849082016104fe565b91607f1691610482565b6020808252825181830181905290939260005b82811061056757505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610545565b600435906001600160a01b038216820361059157565b600080fd5b602435906001600160a01b038216820361059157565b34610591576040366003190112610591576105c561057b565b602435906001600160a01b03168015610642576002549180830180931161062c576020926002557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600093849284845283825260408420818154019055604051908152a380f35b634e487b7160e01b600052601160045260246000fd5b60405163ec442f0560e01b815260006004820152602490fd5b916001600160a01b03808416928315610707571692831561064257600090838252816020526040822054908382106106d5575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b604051634b637e8f60e11b815260006004820152602490fdfea26469706673582212208fcc35ea3f7dcaebd240f7677941cf70101ae17b8f8d9a2c31a67e70bb233c7264736f6c63430008140033";

type MockUSDCConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUSDCConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUSDC__factory extends ContractFactory {
  constructor(...args: MockUSDCConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockUSDC & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockUSDC__factory {
    return super.connect(runner) as MockUSDC__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUSDCInterface {
    return new Interface(_abi) as MockUSDCInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockUSDC {
    return new Contract(address, _abi, runner) as unknown as MockUSDC;
  }
}
